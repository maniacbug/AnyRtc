/*
 Copyright (C) 2011 J. Coliz <maniacbug@ymail.com>

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 version 2 as published by the Free Software Foundation.
 */

// STL headers
#include <vector>
#include <string>
#include <iostream>
// C headers
// Framework headers
// Library headers
#include <cxxtest/TestSuite.h>
// Project headers
// This component's header
#include <AnyRtc.h>

using namespace std;

class AnyRtcTestSuite: public CxxTest::TestSuite
{
  AnyRtc* pAnyRtc ;
public:
  void setUp()
  {
    pAnyRtc = new AnyRtc();
    pAnyRtc->begin();
  }
  
  void tearDown()
  {
    delete pAnyRtc;
  }

  void testEmpty( void )
  {
    TS_ASSERT(pAnyRtc);
  }

  void testGetSet( void )
  {
    const uint32_t tval = 123456;
    pAnyRtc->adjust( tval );

    TS_ASSERT_EQUALS( pAnyRtc->now(), tval );
  }
  void testGetSetDateTime( void )
  {
    DateTime dt(2011,12,1,2,3,4);
    pAnyRtc->adjust( dt );

    TS_ASSERT_EQUALS( pAnyRtc->nowDateTime().unixtime(), dt.unixtime() );
  }
  void testElapsedTime( void )
  {
    const uint32_t tval = 123456;
    const uint32_t elapsed = 10;
    pAnyRtc->adjust( tval );
    delay( 1000 * elapsed );

    TS_ASSERT_EQUALS( pAnyRtc->now(), tval + elapsed );
  }
  void testStaticGetSet( void )
  {
    const uint32_t tval = 123456;
    RTC.adjust( tval );

    TS_ASSERT_EQUALS( RTC.now(), tval );
  }
  void testStaticElapsedTime( void )
  {
    const uint32_t tval = 123456;
    const uint32_t elapsed = 10;
    RTC.adjust( tval );
    delay( 1000 * elapsed );

    TS_ASSERT_EQUALS( RTC.now(), tval + elapsed );
  }
};
// vim:cin:ai:sts=2 sw=2 ft=cpp
