/*
 Copyright (C) 2011 J. Coliz <maniacbug@ymail.com>

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 version 2 as published by the Free Software Foundation.
 */

// STL headers
#include <vector>
#include <string>
#include <iostream>
// C headers
// Framework headers
// Library headers
#include <cxxtest/TestSuite.h>
// Project headers
// This component's header
#include <AnyRtc.h>

using namespace std;

class AnyRtcTestSuite: public CxxTest::TestSuite
{
  struct TestRtc: public IRTC
  {
    uint32_t value;
    int begin_called;
    TestRtc(void): value(0), begin_called(0) {}
    virtual uint8_t begin(void) { value = 0; ++begin_called; return true; }
    virtual void adjust(uint32_t _v) { value = _v; }
    virtual uint32_t now(void) const { return value; }
  };

  AnyRtc* pAnyRtc ;
  TestRtc* pTestRtc ;
public:
  void setUp()
  {
    pAnyRtc = new AnyRtc();
    pTestRtc = new TestRtc();
    pAnyRtc->begin();
  }
  
  void tearDown()
  {
    delete pTestRtc;
    delete pAnyRtc;
  }

  void testEmpty( void )
  {
    TS_ASSERT(pAnyRtc);
  }

  void testGetSet( void )
  {
    const uint32_t tval = 123456;
    pAnyRtc->adjust( tval );

    TS_ASSERT_EQUALS( pAnyRtc->now(), tval );
  }
  void testGetSetDateTime( void )
  {
    DateTime dt(2011,12,1,2,3,4);
    pAnyRtc->adjust( dt );

    TS_ASSERT_EQUALS( pAnyRtc->nowDateTime().unixtime(), dt.unixtime() );
  }
  void testElapsedTime( void )
  {
    const uint32_t tval = 123456;
    const uint32_t elapsed = 10;
    pAnyRtc->adjust( tval );
    delay( 1000 * elapsed );

    TS_ASSERT_EQUALS( pAnyRtc->now(), tval + elapsed );
  }
  void testStaticGetSet( void )
  {
    const uint32_t tval = 123456;
    RTC.adjust( tval );

    TS_ASSERT_EQUALS( RTC.now(), tval );
  }
  void testStaticElapsedTime( void )
  {
    const uint32_t tval = 123456;
    const uint32_t elapsed = 10;
    RTC.adjust( tval );
    delay( 1000 * elapsed );

    TS_ASSERT_EQUALS( RTC.now(), tval + elapsed );
  }
  void testOverride( void )
  {
    RTC.begin( pTestRtc ); 
    
    TS_ASSERT_EQUALS( pTestRtc->begin_called, 1 ); 
  }
  void testOverrideSet( void )
  {
    const uint32_t tval = 123456;
    RTC.begin( pTestRtc );
    RTC.adjust( tval );

    TS_ASSERT_EQUALS( pTestRtc->value, tval ); 
  }
  void testOverrideGet( void )
  {
    const uint32_t tval = 7891011;
    RTC.begin( pTestRtc );
    pTestRtc->value = tval;

    TS_ASSERT_EQUALS( RTC.now(), tval ); 
  }
};
// vim:cin:ai:sts=2 sw=2 ft=cpp
